# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CountryCode {
  country_code: String!
}

type ProjectCategory {
  project_category: String!
}

type ProjectImage {
  projectImage_id: String!
  image_url: String!
  image_index: Int!
  project: Project!
}

type Project {
  project_id: String!
  title: String!
  content: String!
  amount_required: Int!
  amount_raised: Int!
  donation_count: Int!
  created_at: DateTime!
  user: User!
  projectCategory: ProjectCategory!
  countryCode: CountryCode!
  projectImages: [ProjectImage!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ProjectDonation {
  projectDonation_id: String!
  imp_uid: String!
  amount: Int!
  status: PROJECT_DONATION_STATUS_ENUM!
  created_at: DateTime!
  user: User!
  project: Project!
}

enum PROJECT_DONATION_STATUS_ENUM {
  PAYMENT
  CANCEL
}

type User {
  user_id: String!
  email: String!
  name: String!
  profile_image_url: String
  created_at: DateTime!
  countryCode: CountryCode!
  projects: [Project!]!
  projectDonations: [ProjectDonation!]!
}

type FetchUserLoggedInResponseDTO {
  name: String!
  profile_image_url: String
  countryCode: CountryCode!
}

type UpdateUserResponseDTO {
  name: String
  profile_image_url: String
}

type CreateUserResponseDTO {
  accessToken: String!
}

type UpdateCountryCodeResponseDTO {
  accessToken: String!
}

type FetchUserLoggedInProjectsResponseDTO {
  project_id: String!
  title: String!
  amount_required: Int!
  amount_raised: Int!
  countryCode: CountryCode!
  project_image_url: String!
}

type FetchUserLoggedInProjectsWithTotalResponseDTO {
  projectsUserLoggedIn: [FetchUserLoggedInProjectsResponseDTO!]!
  total: Int!
}

type FetchProjectResponseDTO {
  project_id: String!
  title: String!
  content: String!
  amount_required: Int!
  amount_raised: Int!
  donation_count: Int!
  created_at: DateTime!
  user: User!
  projectCategory: ProjectCategory!
  countryCode: CountryCode!
  projectImages: [ProjectImage!]!
}

type FetchProjectsTrendingResponseDTO {
  project_id: String!
  title: String!
  amount_required: Int!
  amount_raised: Int!
  countryCode: CountryCode!
  project_image_url: String!
}

type FetchProjectsNewestResponseDTO {
  project_id: String!
  title: String!
  amount_required: Int!
  amount_raised: Int!
  countryCode: CountryCode!
  project_image_url: String!
}

type FetchProjectsByCountryResponseDTO {
  project_id: String!
  title: String!
  amount_required: Int!
  amount_raised: Int!
  countryCode: CountryCode!
  project_image_url: String!
}

type SearchProjectResponseDTO {
  project_id: String!
  title: String!
  amount_required: Int!
  amount_raised: Int!
  countryCode: CountryCode!
  project_image_url: String!
}

type FetchProjectOgResponseDTO {
  title: String!
  content: String!
}

type FetchUserLoggedInDonationsResponseDTO {
  amount: Int!
  created_at: DateTime!
  project: Project!
}

type FetchUserLoggedInDonationsWithTotalResponseDTO {
  UserLoggedInDonations: [FetchUserLoggedInDonationsResponseDTO!]!
  total: Int!
}

type CreateProjectDonationResponseDTO {
  success: Boolean!
}

type CreateProjectResponseDTO {
  project_id: String!
}

type FetchProjectsTrendingWithTotalResponseDTO {
  projectsTrending: [FetchProjectsTrendingResponseDTO!]!
  total: Int!
}

type FetchProjectsNewestWithTotalResponseDTO {
  projectsNewest: [FetchProjectsNewestResponseDTO!]!
  total: Int!
}

type FetchProjectsByCountryWithTotalResponseDTO {
  projectsByCountry: [FetchProjectsByCountryResponseDTO!]!
  total: Int!
}

type FetchProjectCommentsResponseDTO {
  projectComment_id: String!
  content: String!
  user: User!
  amount: Int!
}

type CreateProjectCommentResponseDTO {
  success: Boolean!
}

type FetchProjectCommentsWithTotalResponseDTO {
  projectComments: [FetchProjectCommentsResponseDTO!]!
  total: Int!
}

type UpdateProjectCommentResponseDTO {
  success: Boolean!
}

type DeleteProjectCommentResponseDTO {
  success: Boolean!
}

type SearchProjectWithTotalResponseDTO {
  searchProjects: [SearchProjectResponseDTO!]!
  total: Int!
}

type FetchUpdatedProjectsResponseDTO {
  content: String!
  created_at: DateTime!
}

type CreateUpdatedProjectResponseDTO {
  success: Boolean!
}

type Query {
  fetchProjectComments(fetchProjectCommentsDTO: FetchProjectCommentsDTO!): FetchProjectCommentsWithTotalResponseDTO!
  fetchProject(fetchProjectDTO: FetchProjectDTO!): FetchProjectResponseDTO!
  fetchProjectOg(fetchProjectOgDTO: FetchProjectOgDTO!): FetchProjectOgResponseDTO!
  fetchProjectsTrending(fetchProjectsTrendingDTO: FetchProjectsTrendingDTO!): FetchProjectsTrendingWithTotalResponseDTO!
  fetchProjectsNewest(fetchProjectsNewestDTO: FetchProjectsNewestDTO!): FetchProjectsNewestWithTotalResponseDTO!
  fetchProjectsByCountry(fetchProjectsByCountryDTO: FetchProjectsByCountryDTO!): FetchProjectsByCountryWithTotalResponseDTO!
  searchProjects(searchProjectsDTO: SearchProjectDTO!): SearchProjectWithTotalResponseDTO!
  fetchUpdatedProjects(fetchUpdatedProjectsDTO: FetchUpdatedProjectsDTO!): [FetchUpdatedProjectsResponseDTO!]!
  fetchUserLoggedIn: FetchUserLoggedInResponseDTO!
  fetchUserLoggedInProjects(fetchUserLoggedInProjectsDTO: FetchUserLoggedInProjectsDTO!): FetchUserLoggedInProjectsWithTotalResponseDTO!
  fetchUserLoggedInDonations(fetchUserLoggedInDonationsDTO: FetchUserLoggedInDonationsDTO!): FetchUserLoggedInDonationsWithTotalResponseDTO!
}

input FetchProjectCommentsDTO {
  project_id: String!
  offset: Int!
}

input FetchProjectDTO {
  project_id: String!
}

input FetchProjectOgDTO {
  project_id: String!
}

input FetchProjectsTrendingDTO {
  offset: Int!
}

input FetchProjectsNewestDTO {
  offset: Int!
}

input FetchProjectsByCountryDTO {
  offset: Int!
  country_code: String!
  project_category: PROJECT_CATEGORY_WITH_ALL_ENUM! = All
}

enum PROJECT_CATEGORY_WITH_ALL_ENUM {
  All
  Medical
  Emergency
  Memorial
  Education
  CrisisRelief
  Nonprofit
}

input SearchProjectDTO {
  searchTerm: String!
  project_category: PROJECT_CATEGORY_WITH_ALL_ENUM! = All
  offset: Int!
}

input FetchUpdatedProjectsDTO {
  project_id: String!
}

input FetchUserLoggedInProjectsDTO {
  offset: Int!
}

input FetchUserLoggedInDonationsDTO {
  offset: Int!
}

type Mutation {
  loginUser(loginDTO: LoginDTO!): String!
  restoreAccessToken: String!
  createProjectComment(createProjectCommentDTO: CreateProjectCommentDTO!): CreateProjectCommentResponseDTO!
  updateProjectComment(updateProjectCommentDTO: UpdateProjectCommentDTO!): UpdateProjectCommentResponseDTO!
  deleteProjectComment(deleteProjectCommentDTO: DeleteProjectCommentDTO!): DeleteProjectCommentResponseDTO!
  createProject(createProjectDTO: CreateProjectDTO!): CreateProjectResponseDTO!
  createProjectDonation(createProjectDonationDTO: CreateProjectDonationDTO!): CreateProjectDonationResponseDTO!
  createUpdatedProject(createUpdatedProjectDTO: CreateUpdatedProjectDTO!): CreateUpdatedProjectResponseDTO!
  createUser(createUserDTO: CreateUserDTO!): CreateUserResponseDTO!
  updateCountryCode(updateCountryCodeDTO: UpdateCountryCodeDTO!): UpdateCountryCodeResponseDTO!
  updateUser(updateUserDTO: UpdateUserDTO!): UpdateUserResponseDTO!
}

input LoginDTO {
  email: String!
  password: String!
}

input CreateProjectCommentDTO {
  content: String!
  project_id: String!
}

input UpdateProjectCommentDTO {
  content: String!
  project_id: String!
  projectComment_id: String!
}

input DeleteProjectCommentDTO {
  project_id: String!
  projectComment_id: String!
}

input CreateProjectDTO {
  title: String!
  content: String!
  amount_required: Int!
  project_category: PROJECT_CATEGORY_ENUM! = Medical
  projectImageUrls: String!
}

enum PROJECT_CATEGORY_ENUM {
  Medical
  Emergency
  Memorial
  Education
  CrisisRelief
  Nonprofit
}

input CreateProjectDonationDTO {
  imp_uid: String!
  amount: Int!
  project_id: String!
}

input CreateUpdatedProjectDTO {
  content: String!
  project_id: String!
}

input CreateUserDTO {
  email: String!
  name: String!
  profile_image_url: String
  password: String!
  country_code: String!
}

input UpdateCountryCodeDTO {
  country_code: String!
}

input UpdateUserDTO {
  name: String
  profile_image_url: String
}